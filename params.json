{"name":"Chassis","tagline":"Basic layout of a WordPress Git repository. We use this as a base when creating a new repo.","body":"# Sennza Chassis\r\n\r\nThis is the new fangled base repository for Sennza work.\r\n\r\n## Prerequisites\r\n\r\nBefore using Chassis, this is how your system should be set up:\r\n\r\n* Install [Vagrant](http://vagrantup.com/)\r\n* Install vagrant-hostsupdater to access via `vagrant.local`:\r\n\r\n\t\tvagrant plugin install vagrant-hostsupdater\r\n\r\n  **Note for Windows users:** You'll need to set\r\n  `C:\\Windows\\system32\\drivers\\etc\\hosts` to be writable by your user. Simply\r\n  head to the properties and add your user with full control under security.\r\n\r\n  Alternatively, add `vagrant.local` to your hosts file with `192.168.33.10` as\r\n  the IP address.\r\n\r\n## Using\r\n\r\n```bash\r\n# Clone this repo\r\ngit clone --recursive git@github.com:sennza/Chassis.git myproject\r\n# If you forget --recursive:\r\n# git submodule update --init\r\n\r\ncd myproject\r\n\r\n# Clone the content/ directory!\r\n# git clone git@github.com:sennza/myproject.git content\r\n\r\n# Use https://github.com/sennza/wp-content as a base, and follow the\r\n# instructions there.\r\n\r\n# Boot up a VM\r\nvagrant up\r\n```\r\n\r\nMake sure you copy `local-config-sample.php` to `local-config.php`\r\n\r\n## Adding \"Real\" Domains\r\n\r\nWe've realized internally that using vagrant.local doesn't always cut it for\r\ndevelopment as you might be working on an OAuth/OAuth2 plugin that needs a\r\n'real' domain to function. Thankfully we can fake it 'til we make it with a\r\ncustom .yaml file.\r\n\r\n```bash\r\n# Clone this repo\r\ngit clone --recursive git@github.com:sennza/Chassis.git myproject\r\n```\r\n\r\nCopy `config.yaml` and paste it as `config.local.yaml`, then add your real\r\ndomain in to the hosts list.\r\n```yaml\r\nhosts:\r\n    - vagrant.local\r\n    - example.sennza.com.au\r\n```\r\n\r\n(The first host in the list will be used as the machine's name. We recommend\r\nleaving this as `vagrant.local` for the most part.)\r\n\r\n## Working with the VM\r\n\r\n```bash\r\n# Start the VM\r\nvagrant up\r\n\r\n# SSH in to the VM\r\nvagrant ssh\r\n\r\n# Reprovisioning (e.g. after updating this repository)\r\nvagrant provision\r\n\r\n# Reprovisioning without a full apt-get update\r\nvagrant provision --provision-with puppet\r\n\r\n# Suspending (sleeping) the VM\r\n# Note that this doesn't remove the hosts entry\r\nvagrant suspend\r\n\r\n# Halting (shutting down) the VM\r\nvagrant halt\r\n\r\n# Destroying the VM (if your VM is completely broken)\r\nvagrant destroy\r\n```\r\n\r\n\r\n## Updating\r\n\r\n```bash\r\n# Pull and rebase (in case you have project-specific commits)\r\ngit pull --rebase\r\n\r\n## Update submodules (Puppet modules and WP)\r\ngit submodule update --init\r\n```\r\n\r\n\r\n## Update Your Submodules\r\n\r\nSometimes we have to change the submodules because a repository isn't being\r\nregularly maintained. e.g. [Use Puppet Labs's apt module][issue-5].\r\nWhen this happens you'll probably get confused by submodules so here are the\r\ncommands you need to run to get your submodules up to date again.\r\n\r\n[issue-5]: https://github.com/sennza/Chassis/issues/5\r\n\r\n```\r\ngit submodule sync\r\ncd puppet/modules/apt\r\ngit checkout master\r\ngit pull\r\n\r\n# Ensure your VM is up-to-date\r\nvagrant provision\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}